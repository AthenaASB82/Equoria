---
description: 
globs: 
alwaysApply: false
---
### `backend/middleware/errorHandler.js` - `(err, req, res, next)`

### `backend/routes/breedRoutes.js`
- Defines the router for the `/api/breeds` endpoint.
- Purpose: Provides CRUD operations for horse breeds.
- Usage: Mounted in `backend/app.js` at the `/api/breeds` path.
- Related components: `backend/controllers/breedController.js`, `backend/middleware/validationErrorHandler.js`
- Tests: `tests/integration/breeds.test.js`

### `backend/controllers/breedController.js` - `createBreed(req, res, next)`
- Handles requests to `POST /api/breeds`.
- Purpose: Creates a new horse breed. Validates input and checks for duplicate names (case-insensitive).
- Parameters: `req` (Express request object with `name` in body), `res` (Express response object), `next` (Express next function).
- Returns: JSON response with the created breed and status 201, or error status (400, 409).
- Used in: `backend/routes/breedRoutes.js`

### `backend/controllers/breedController.js` - `getAllBreeds(req, res, next)`
- Handles requests to `GET /api/breeds`.
- Purpose: Retrieves all horse breeds, ordered by name.
- Parameters: `req` (Express request object), `res` (Express response object), `next` (Express next function).
- Returns: JSON array of breeds and status 200, or error status.
- Used in: `backend/routes/breedRoutes.js`

### `backend/controllers/breedController.js` - `getBreedById(req, res, next)`
- Handles requests to `GET /api/breeds/:id`.
- Purpose: Retrieves a single horse breed by its ID. Validates that ID is an integer.
- Parameters: `req` (Express request object with `id` in params), `res` (Express response object), `next` (Express next function).
- Returns: JSON object of the breed and status 200, or error status (400, 404).
- Used in: `backend/routes/breedRoutes.js`

### `backend/middleware/validationErrorHandler.js` - `handleValidationErrors(req, res, next)`
- Express middleware for handling validation errors from `express-validator`.
- Purpose: Checks for validation errors collected by `express-validator`. If errors exist, sends a 400 JSON response with the errors. Otherwise, calls `next()`.
- Parameters: `req` (Express request object), `res` (Express response object), `next` (Express next function).
- Usage: Applied in route definitions after validation chains (e.g., in `backend/routes/breedRoutes.js`).

### `backend/models/horseModel.js` - `createHorse(horseData)`
- Inserts a new horse into the `public.horses` table.
- Purpose: To persist a new horse's data in the database.
- Parameters: `horseData` (Object containing all fields for a new horse as defined in `schema.sql`).
- Returns: Promise resolving to the newly inserted horse record (object).
- Used in: (To be used by horse controller/service)

### `backend/models/horseModel.js` - `getHorseById(id)`
- Retrieves a horse from the `public.horses` table by its ID.
- Purpose: To fetch a specific horse's details from the database.
- Parameters: `id` (Integer, the ID of the horse to retrieve).
- Returns: Promise resolving to the horse record (object) if found, otherwise `undefined`.
- Used in: (To be used by horse controller/service)

### `backend/config/logger.js` - `logger`
- Configures and exports a `winston` logger instance.
- Purpose: Provides a centralized logging solution for the application. Logs to console with different formats/levels for development and production.
- Usage: Imported in `backend/app.js` for HTTP request logging and can be imported elsewhere for custom logging.
- Environment-dependent: Log level and formatting change based on `NODE_ENV`.

### `backend/config/config.js`
- Loads and validates environment variables from `.env` file.
- Purpose: Centralizes configuration management and ensures required variables are present.
- Exports: `port`, `dbUrl`, `env` (NODE_ENV).
- Usage: Imported throughout the backend for accessing configuration values (e.g., `server.js`, `db/index.js`, `config/logger.js`).

# Horse Show Scoring System (Task 1.6b+)

### Updated Scoring Formula with Health
The comprehensive scoring system for horse show competitions uses the following formula:

```
üèá FinalScore =
  BaseStatScore (weighted: 50/30/20)
+ TraitBonus       (+5 if discipline matches horse trait)
+ TrainingScore    (0‚Äì100, optional)
+ SaddleBonus      (flat number)
+ BridleBonus      (flat number)
+ RiderBonus       (% of subtotal)
- RiderPenalty     (% of subtotal)
+ HealthModifier   (% adjustment based on rating)
```

### Scoring Components Breakdown
- **BaseStatScore**: Weighted combination of horse stats (50/30/20 distribution)
- **TraitBonus**: +5 points when horse's natural trait matches show discipline
- **TrainingScore**: 0-100 points based on horse's training level (optional component)
- **SaddleBonus**: Flat point bonus from equipped saddle
- **BridleBonus**: Flat point bonus from equipped bridle
- **RiderBonus**: Percentage increase of subtotal based on rider skill
- **RiderPenalty**: Percentage decrease of subtotal for rider mismatches
- **HealthModifier**: Percentage adjustment based on horse's health rating

### Health Modifier Reference Table
| Health Rating | Modifier |
|---------------|----------|
| Excellent     | +5%      |
| Very Good     | +3%      |
| Good          | 0%       |
| Fair          | -3%      |
| Bad           | -5%      |

### Integration with Eligibility System
- Eligibility (Task 1.6a): Determines which horses CAN enter shows
- Scoring (Task 1.6b+): Determines how well horses PERFORM in shows
- Health affects scoring but NOT eligibility (confirmed in 1.6a implementation)
- Trait matching provides scoring bonus but doesn't restrict entry

### Implementation Notes
- This formula will be implemented in future tasks (1.6b+)
- Current eligibility system (1.6a) is designed to work seamlessly with this scoring approach
- Trait-discipline matching provides competitive advantage without restricting participation

### `backend/utils/statMap.js` - Discipline Stat Mapping System
- **Purpose**: Defines stat weightings for all 21 competition disciplines
- **Structure**: Each discipline maps to [primary, secondary, tertiary] stats with 50/30/20% weights
- **Available Stats**: speed, stamina, agility, balance, precision, intelligence, boldness, flexibility, obedience, focus
- **Functions**:
  - `getStatsForDiscipline(discipline)` - Returns stat array for specific discipline
  - `getAllDisciplines()` - Returns all available discipline names
  - `getAllStatCategories()` - Returns all unique stat categories
  - `isDisciplineValid(discipline)` - Validates discipline existence
- **Usage**: Essential for BaseStatScore calculation in scoring system
- **Examples**: 
  - Racing: ["speed", "stamina", "focus"] 
  - Dressage: ["precision", "focus", "obedience"]
  - Show Jumping: ["balance", "agility", "boldness"]

### Horse Schema Updates - Complete Stat System
- **Migration Applied**: `20250525042054_add_missing_horse_stats` successfully added all required stat fields
- **New Stat Fields Added**: balance, boldness, flexibility, focus, obedience, stamina (all as optional Int fields)
- **Complete Stat Coverage**: All 10 stat categories from statMap now exist in Horse schema
- **Legacy Compatibility**: Kept existing strength and endurance fields for backward compatibility
- **Database Status**: All 151 tests passing, schema fully synchronized with competition requirements

# Competition Simulation System (Task 1.6c) - COMPLETED

### `backend/utils/getStatScore.js` - Base Stat Score Calculation
- **Purpose**: Calculates weighted base stat score for horses in specific disciplines
- **Function**: `getStatScore(horse, discipline)` 
- **Logic**: Uses statMap to get [primary, secondary, tertiary] stats and applies 50/30/20% weighting
- **Validation**: Comprehensive input validation with descriptive error messages
- **Default Handling**: Missing horse stats default to 0 for graceful calculation
- **Usage**: Core component of competition scoring system
- **Tests**: 5 test cases covering all scenarios and edge cases

### `backend/utils/healthBonus.js` - Health Modifier System
- **Purpose**: Converts health ratings to percentage modifiers for competition scoring
- **Function**: `getHealthModifier(healthRating)`
- **Modifiers**: Excellent (+5%), Very Good (+3%), Good (0%), Fair (-3%), Bad (-5%)
- **Return Format**: Decimal values (e.g., 0.05 for +5%, -0.03 for -3%)
- **Fallback**: Returns 0 for unknown health ratings
- **Usage**: Applied as final percentage adjustment to competition scores
- **Tests**: 2 test cases covering all health ratings and edge cases

### `backend/utils/riderBonus.js` - Rider Modifier System
- **Purpose**: Applies rider bonuses and penalties to competition scores
- **Function**: `applyRiderModifiers(score, bonusPercent, penaltyPercent)`
- **Formula**: `score * (1 + bonusPercent - penaltyPercent)`
- **Validation**: Bonus 0-10%, Penalty 0-8%, Score must be non-negative
- **Default Values**: Both modifiers default to 0 if not provided
- **Usage**: Applied before health modifier in scoring pipeline
- **Tests**: 5 test cases covering bonuses, penalties, combinations, and validation

### `backend/logic/simulateCompetition.js` - Main Competition Engine
- **Purpose**: Complete competition simulation with ranking and placement assignment
- **Function**: `simulateCompetition(horses, show)`
- **Scoring Formula Implementation**:
  1. Base stat score (weighted 50/30/20 from statMap)
  2. Trait bonus (+5 if horse.trait matches show.discipline)
  3. Training score (0-100, defaults to 0)
  4. Tack bonuses (saddle + bridle flat bonuses)
  5. Rider modifiers (percentage bonus/penalty)
  6. Health modifier (percentage adjustment)
- **Output**: Sorted array with horseId, name, score, placement ("1st"/"2nd"/"3rd"/null)
- **Error Handling**: Graceful handling of calculation errors (assigns 0 score)
- **Placement Logic**: Top 3 horses get placements, others get null
- **Score Precision**: Rounded to 1 decimal place for display
- **Tests**: 8 comprehensive test cases covering all scenarios

### Competition System Integration
- **Complete Scoring Pipeline**: All formula components implemented and tested
- **Modular Design**: Each component can be tested and used independently
- **Error Resilience**: System continues functioning even with malformed horse data
- **Performance Ready**: Efficient calculation suitable for real-time competition simulation
- **Test Coverage**: 19 test cases covering all utilities and integration scenarios
- **Example Output**: 
  ```javascript
  [
    { horseId: 1, name: "Nova", score: 152.6, placement: "1st" },
    { horseId: 2, name: "Ashen", score: 147.3, placement: "2nd" },
    { horseId: 3, name: "Dart", score: 139.8, placement: "3rd" },
    { horseId: 4, name: "Milo", score: 122.1, placement: null },
    { horseId: 5, name: "Zuri", score: 118.9, placement: null }
  ]
  ```

