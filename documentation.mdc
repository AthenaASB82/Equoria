---
description: 
globs: 
alwaysApply: false
---
### `backend/middleware/errorHandler.js` - `(err, req, res, next)`

### `backend/routes/breedRoutes.js`
- Defines the router for the `/api/breeds` endpoint.
- Purpose: Provides CRUD operations for horse breeds.
- Usage: Mounted in `backend/app.js` at the `/api/breeds` path.
- Related components: `backend/controllers/breedController.js`, `backend/middleware/validationErrorHandler.js`
- Tests: `tests/integration/breeds.test.js`

### `backend/controllers/breedController.js` - `createBreed(req, res, next)`
- Handles requests to `POST /api/breeds`.
- Purpose: Creates a new horse breed. Validates input and checks for duplicate names (case-insensitive).
- Parameters: `req` (Express request object with `name` in body), `res` (Express response object), `next` (Express next function).
- Returns: JSON response with the created breed and status 201, or error status (400, 409).
- Used in: `backend/routes/breedRoutes.js`

### `backend/controllers/breedController.js` - `getAllBreeds(req, res, next)`
- Handles requests to `GET /api/breeds`.
- Purpose: Retrieves all horse breeds, ordered by name.
- Parameters: `req` (Express request object), `res` (Express response object), `next` (Express next function).
- Returns: JSON array of breeds and status 200, or error status.
- Used in: `backend/routes/breedRoutes.js`

### `backend/controllers/breedController.js` - `getBreedById(req, res, next)`
- Handles requests to `GET /api/breeds/:id`.
- Purpose: Retrieves a single horse breed by its ID. Validates that ID is an integer.
- Parameters: `req` (Express request object with `id` in params), `res` (Express response object), `next` (Express next function).
- Returns: JSON object of the breed and status 200, or error status (400, 404).
- Used in: `backend/routes/breedRoutes.js`

### `backend/middleware/validationErrorHandler.js` - `handleValidationErrors(req, res, next)`
- Express middleware for handling validation errors from `express-validator`.
- Purpose: Checks for validation errors collected by `express-validator`. If errors exist, sends a 400 JSON response with the errors. Otherwise, calls `next()`.
- Parameters: `req` (Express request object), `res` (Express response object), `next` (Express next function).
- Usage: Applied in route definitions after validation chains (e.g., in `backend/routes/breedRoutes.js`).

### `backend/models/horseModel.js` - `createHorse(horseData)`
- Inserts a new horse into the `public.horses` table.
- Purpose: To persist a new horse's data in the database.
- Parameters: `horseData` (Object containing all fields for a new horse as defined in `schema.sql`).
- Returns: Promise resolving to the newly inserted horse record (object).
- Used in: (To be used by horse controller/service)

### `backend/models/horseModel.js` - `getHorseById(id)`
- Retrieves a horse from the `public.horses` table by its ID.
- Purpose: To fetch a specific horse's details from the database.
- Parameters: `id` (Integer, the ID of the horse to retrieve).
- Returns: Promise resolving to the horse record (object) if found, otherwise `undefined`.
- Used in: (To be used by horse controller/service)

### `backend/config/logger.js` - `logger`
- Configures and exports a `winston` logger instance.
- Purpose: Provides a centralized logging solution for the application. Logs to console with different formats/levels for development and production.
- Usage: Imported in `backend/app.js` for HTTP request logging and can be imported elsewhere for custom logging.
- Environment-dependent: Log level and formatting change based on `NODE_ENV`.

### `backend/config/config.js`
- Loads and validates environment variables from `.env` file.
- Purpose: Centralizes configuration management and ensures required variables are present.
- Exports: `port`, `dbUrl`, `env` (NODE_ENV).
- Usage: Imported throughout the backend for accessing configuration values (e.g., `server.js`, `db/index.js`, `config/logger.js`).

