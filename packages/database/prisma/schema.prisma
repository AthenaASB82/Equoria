generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Horse {
  id        Int      @id @default(autoincrement())
  name      String
  age       Int
  createdAt DateTime @default(now())

  breed   Breed @relation(fields: [breedId], references: [id])
  breedId Int

  player   Player? @relation(fields: [playerId], references: [id])
  playerId String?

  owner   User? @relation(fields: [ownerId], references: [id])
  ownerId Int?

  stable   Stable? @relation(fields: [stableId], references: [id])
  stableId Int?

  sex                   String?
  date_of_birth         DateTime?
  genotype              Json?
  phenotypic_markings   Json?
  final_display_color   String?
  shade                 String?
  image_url             String?
  trait                 String?
  temperament           String?
  // Core stats for competition scoring (all 10 stat categories)
  speed                 Int?
  stamina               Int?
  agility               Int?
  balance               Int?
  precision             Int?
  intelligence          Int?
  boldness              Int?
  flexibility           Int?
  obedience             Int?
  focus                 Int?
  
  // Legacy stats (keeping for backward compatibility)
  strength              Int?
  endurance             Int?
  personality           String?
  total_earnings        Float?
  sire_id               Int?
  dam_id                Int?
  stud_status           String?
  stud_fee              Float?
  last_bred_date        DateTime?
  for_sale              Boolean? @default(false)
  sale_price            Float? @default(0)
  health_status         String?
  last_vetted_date      DateTime?
  tack                  Json?
  trainingCooldown      DateTime?
  earnings              Float?   @default(0)
  rider                 Json?    // Required for competition entry
  disciplineScores      Json?    // Stores discipline scores as {"Dressage": 10, "Show Jumping": 20, ...}

  competitionResults CompetitionResult[]
  trainingLogs       TrainingLog[]
}

model Player {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  money    Int
  level    Int
  xp       Int
  settings Json
  horses   Horse[]  // 1:N relation to Horse

  @@map("players")
}

model Breed {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  horses Horse[]
}

model User {
  id    Int     @id @default(autoincrement())
  name  String?
  email String? @unique

  horses Horse[]
}

model Stable {
  id   Int     @id @default(autoincrement())
  name String?

  horses Horse[]
}

model Show {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  discipline String
  levelMin   Int
  levelMax   Int
  entryFee   Int
  prize      Int
  runDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  hostPlayer String?  // Player ID who hosts/benefits from entry fees

  competitionResults CompetitionResult[]

  @@map("shows")
}

model CompetitionResult {
  id         Int      @id @default(autoincrement())
  score      Float
  placement  String?
  discipline String
  runDate    DateTime
  createdAt  DateTime @default(now())
  showName   String   // Store show name for history
  prizeWon   Float?   @default(0)
  statGains  Json?    // Store any stat increases from winning

  horse   Horse @relation(fields: [horseId], references: [id])
  horseId Int

  show   Show @relation(fields: [showId], references: [id])
  showId Int

  @@map("competition_results")
}

model TrainingLog {
  id         Int      @id @default(autoincrement())
  discipline String
  trainedAt  DateTime @default(now())

  horse   Horse @relation(fields: [horseId], references: [id])
  horseId Int

  @@map("training_logs")
} 