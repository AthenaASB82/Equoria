---
description: Living technical documentation file for Equoria. Updated automatically with function definitions, API schemas, and database changes.
globs: ["**/*"]
alwaysApply: true
---
## ðŸ“š Technical Documentation

This file is maintained as a centralized location for Equoria's evolving technical references. Cursor should:

- Append new content here when:
  - A new function, utility, or hook is created
  - A new Express route is defined
  - A database schema/table is added or modified
  - A new file or module contains reusable logic

Each section should include:
- Function name (with signature if available)
- Purpose and usage
- Parameters and return values
- Related components, files, or tests

**Example Entry:**
```
### createFoalProfile(foalData: Object)
- Creates a new foal profile from provided genetic data and parentage.
- Params: foalData (includes genotype, traits, and lineage ID)
- Returns: inserted DB record
- Used in: /routes/breeding.js
```

> Use this file to ensure the entire development team has access to up-to-date internal documentation.

### `backend/routes/ping.js`
- Defines the router for the `/ping` endpoint.
- Purpose: Provides a simple health check or test endpoint.
- Usage: Mounted in `backend/app.js` at the `/ping` path.
- Related components: `backend/controllers/pingController.js`, `backend/middleware/validatePing.js`
- Tests: `tests/integration/ping.test.js`

### `backend/controllers/pingController.js` - `handlePing(req, res)`
- Handles requests to the `/ping` endpoint.
- Purpose: Responds with a JSON message, optionally including a validated `name` query parameter.
- Parameters: `req` (Express request object), `res` (Express response object).
- Returns: JSON response `{ message: "pong" }` or `{ message: "pong, [name]!" }`.
- Used in: `backend/routes/ping.js`

### `backend/middleware/validatePing.js` - `validatePing`
- Express middleware array for validating the `/ping` route's query parameters.
- Purpose: Validates the optional `name` query parameter to ensure it is a string between 2 and 30 characters.
- Usage: Applied to the `/ping` route in `backend/routes/ping.js`.
- Returns: Calls `next()` if validation passes, otherwise responds with a 400 error and validation messages.

### `backend/middleware/errorHandler.js` - `(err, req, res, next)`
- Global error handling middleware for the Express application.
- Purpose: Catches errors passed via `next(err)` from other routes/middleware, logs them, and sends a generic 500 Internal Server Error JSON response.
- Parameters: `err` (Error object), `req` (Express request object), `res` (Express response object), `next` (Express next function).
- Usage: Applied as the last middleware in `backend/app.js`.

### `backend/models/horseModel.js` - `createHorse(horseData: Object)`
- Creates a new horse record in the database using Prisma Client with proper relationship handling.
- Purpose: Handles horse creation with breed, owner, and stable relationships, supports all horse schema fields.
- Parameters: `horseData` (object containing horse data - requires name, age, and either breedId or breed connection)
- Validation: Validates required fields (name, age, breed), handles multiple breed input formats
- Breed formats supported: 
  - `breedId: number` (direct foreign key)
  - `breed: { connect: { id: number } }` (Prisma relation syntax)
  - `breed: number` (treated as breedId)
- Returns: Created horse object with included breed, owner, and stable relations
- Throws: Error with descriptive message for validation failures or database errors
- Used in: Breeding controllers, horse management endpoints
- Tests: `backend/models/horseModel.test.js` - 8 test cases covering all scenarios

### `backend/models/horseModel.js` - `getHorseById(id: string|number)`
- Retrieves a horse by ID with all relationship data included.
- Purpose: Fetches a specific horse with breed, owner, and stable information.
- Parameters: `id` (string or number - horse ID, validated and converted to integer)
- Validation: Ensures ID is a valid positive integer
- Returns: Horse object with relations if found, null if not found
- Relations included: breed, owner, stable
- Throws: Error for invalid IDs or database errors
- Used in: Horse detail views, breeding operations, marketplace
- Tests: `backend/models/horseModel.test.js` - 7 test cases covering success, not found, and validation scenarios

### `backend/seed/horseSeed.js` - `findOrCreateBreed(breedName: string)`
- Finds an existing breed by name or creates a new one if not found.
- Purpose: Ensures breed records exist for horse seeding operations.
- Parameters: `breedName` (string - name of the breed to find or create)
- Validation: Returns null if breedName is undefined or null
- Returns: Breed object with id and name, or null if invalid input
- Database operations: Uses `prisma.breed.findUnique()` and `prisma.breed.create()`
- Error handling: Throws errors with descriptive messages for database failures
- Used in: Database seeding operations
- Tests: `backend/seed/horseSeed.test.js` - 4 test cases covering find, create, null, and error scenarios

### `backend/seed/horseSeed.js` - `ensureReferencedRecordsExist()`
- Creates required User and Stable records for horse seeding operations.
- Purpose: Ensures foreign key references exist before creating horse records.
- Parameters: None
- Creates: User records with IDs 1 and 2, Stable records with IDs 1 and 2
- Error handling: Logs warnings but continues if creation fails
- Database operations: Uses `prisma.user.upsert()` and `prisma.stable.upsert()`
- Used in: Database seeding initialization
- Tests: `backend/seed/horseSeed.test.js` - 2 test cases covering success and error scenarios

### `backend/seed/horseSeed.js` - `checkHorseExists(name: string)`
- Checks if a horse with the given name already exists in the database.
- Purpose: Prevents duplicate horse creation during seeding operations.
- Parameters: `name` (string - horse name to check)
- Returns: Boolean - true if horse exists, false otherwise
- Error handling: Returns false and logs warning on database errors
- Database operations: Uses `prisma.horse.findFirst()`
- Used in: Duplicate prevention during seeding
- Tests: `backend/seed/horseSeed.test.js` - 3 test cases covering exists, not exists, and error scenarios

### `backend/seed/horseSeed.js` - `seedHorses()`
- Main seeding function that orchestrates the entire horse seeding process.
- Purpose: Creates sample horses with proper validation and error handling.
- Parameters: None
- Returns: Boolean - true if successful, false if there were issues
- Features: Duplicate prevention, comprehensive error handling, detailed logging
- Process: Ensures references exist â†’ checks duplicates â†’ creates breeds â†’ creates horses
- Error handling: Categorizes failures, continues on non-fatal errors, provides summary statistics
- Integration: Uses `horseModel.createHorse()` for consistent validation
- Used in: Main seeding script execution
- Tests: Covered through individual function tests and integration scenarios

### `backend/seed/horseSeed.js` - Sample Data Structure
- Contains 3 complete horse records with all schema fields populated
- Includes proper age fields (4, 5, and 1 years respectively) required by horseModel validation
- Uses ES module imports with proper `__dirname` handling for file paths
- Integrates with `horseModel.createHorse()` for consistent validation
- Error handling: Provides detailed logging and graceful failure handling
- Data relationships: Properly handles breed, owner, and stable connections
- Security: Environment validation without exposing sensitive database credentials
- CLI integration: Includes npm scripts for easy execution (`npm run seed`, `npm run seed:dev`)
- Documentation: Complete README.md with usage examples and troubleshooting guide

# Player Model Functions

### `backend/models/playerModel.js` - `createPlayer(playerData: Object)`
- Creates a new player in the database with comprehensive validation.
- Purpose: Handles player creation with required fields validation and business rules enforcement.
- Parameters: `playerData` (object containing name, email, money, level, xp, settings - all required)
- Validation: 
  - Required fields: name, email, money, level, xp, settings
  - Email format validation
  - Money >= 0, level >= 1, xp >= 0
- Returns: Created player object with generated UUID
- Throws: Error with descriptive message for validation failures or database errors
- Used in: Player registration, game initialization
- Tests: `backend/models/playerModel.test.js` - 12 test cases covering all validation scenarios

### `backend/models/playerModel.js` - `getPlayerById(id: string)`
- Retrieves a player by UUID with validation.
- Purpose: Fetches a specific player by their unique identifier.
- Parameters: `id` (string - player UUID, validated for proper format)
- Validation: UUID format validation (supports both production UUIDs and test mock IDs)
- Returns: Player object if found, null if not found
- Throws: Error for invalid UUID format or database errors
- Used in: Player profile views, authentication verification, game state loading
- Tests: `backend/models/playerModel.test.js` - 4 test cases covering success, not found, and validation scenarios

### `backend/models/playerModel.js` - `getPlayerByEmail(email: string)`
- Retrieves a player by email address with validation.
- Purpose: Enables player lookup by email for authentication and account management.
- Parameters: `email` (string - player email, validated for proper format)
- Validation: Email format validation using regex
- Returns: Player object if found, null if not found
- Throws: Error for invalid email format or database errors
- Used in: Login systems, password reset, account verification
- Tests: `backend/models/playerModel.test.js` - 3 test cases covering success, not found, and validation scenarios

### `backend/models/playerModel.js` - `getPlayerWithHorses(id: string)`
- Retrieves a player with all related horse data included.
- Purpose: Provides complete player profile including their horse collection for game views.
- Parameters: `id` (string - player UUID, validated for proper format)
- Validation: UUID format validation
- Returns: Player object with horses array (including breed and stable relations), null if not found
- Relations included: horses.breed, horses.stable
- Throws: Error for invalid UUID format or database errors
- Used in: Player dashboard, stable management, horse collection views
- Tests: `backend/models/playerModel.test.js` - 3 test cases covering success, not found, and validation scenarios

### `backend/models/playerModel.js` - `updatePlayer(id: string, updateData: Object)`
- Updates a player's information with validation.
- Purpose: Modifies player data such as money, level, xp, or settings for game progression.
- Parameters: `id` (string - player UUID), `updateData` (object - fields to update)
- Validation: UUID format validation, ensures update data is provided
- Returns: Updated player object
- Throws: Error for invalid UUID format, empty update data, or database errors
- Used in: Game progression, settings changes, in-game purchases, leveling system
- Tests: `backend/models/playerModel.test.js` - 4 test cases covering success and validation scenarios

### `backend/models/playerModel.js` - `deletePlayer(id: string)`
- Deletes a player from the database.
- Purpose: Removes player accounts for account deletion requests or administrative actions.
- Parameters: `id` (string - player UUID, validated for proper format)
- Validation: UUID format validation
- Returns: Deleted player object
- Throws: Error for invalid UUID format or database errors
- Used in: Account deletion, administrative moderation
- Tests: `backend/models/playerModel.test.js` - 3 test cases covering success and validation scenarios

### Player Model Schema Design
- Uses UUID for primary keys (String @id @default(uuid()))
- Enforces unique email constraint
- Required fields: name, email, money, level, xp, settings
- Settings stored as JSON for flexible configuration
- Maps to "players" table using @@map("players")
- Maintains 1:N relationship with Horse model via horses field
- Backward compatible with existing User model through optional playerId on Horse

# Player Seeding Functions

### `backend/seed/horseSeed.js` - `checkPlayerExists(email: string)`
- Checks if a player with the given email already exists in the database.
- Purpose: Prevents duplicate player creation during seeding operations.
- Parameters: `email` (string - player email to check)
- Returns: Boolean - true if player exists, false otherwise
- Error handling: Returns false and logs warning on database errors
- Database operations: Uses `prisma.player.findUnique()`
- Used in: Duplicate prevention during player seeding
- Tests: Covered through integration testing scenarios

### `backend/seed/horseSeed.js` - `seedPlayerWithHorses()`
- Creates a test player with 2 linked horses for development and testing purposes.
- Purpose: Provides sample player data with proper Horse-Player relationships for testing.
- Parameters: None
- Returns: Boolean - true if successful, false if there were issues
- Features: 
  - Creates player with UUID "test-player-uuid-123"
  - Links 2 horses (Starlight and Comet) to the player
  - Includes comprehensive horse data with all schema fields
  - Proper breed relationship handling
- Player data: Test Player (test@example.com) with money: 500, level: 3, xp: 1000
- Horse data: Starlight (4yo Mare) and Comet (6yo Stallion), both Thoroughbreds
- Error handling: Comprehensive logging and graceful failure handling
- Integration: Uses `createPlayer()` and `createHorse()` for consistent validation
- Used in: Development database seeding, integration testing setup
- Tests: Validated through integration tests in `tests/integration/player.test.js`

### `backend/seed/horseSeed.js` - Enhanced Main Function
- Updated main seeding orchestration to include both horse and player seeding
- Executes `seedHorses()` followed by `seedPlayerWithHorses()`
- Provides comprehensive success/failure reporting for both operations
- Maintains backward compatibility with existing horse-only seeding
- Proper cleanup and Prisma client disconnection
- Exit code handling for CI/CD integration

# Training Cooldown Utility Functions

### `backend/utils/trainingCooldown.js` - `canTrain(horse: Object)`
- Checks if a horse can train based on cooldown status.
- Purpose: Determines if a horse's training cooldown has expired or is not set.
- Parameters: `horse` (object - horse with trainingCooldown field)
- Validation: Throws error if horse object is null or undefined
- Returns: Boolean - true if horse can train (no cooldown or cooldown in past), false otherwise
- Logic: Returns true if trainingCooldown is null or if cooldown date <= current time
- Used in: Training system, UI state management, game logic validation
- Tests: `backend/tests/trainingCooldown.test.js` - 5 test cases covering all scenarios

### `backend/utils/trainingCooldown.js` - `getCooldownTimeRemaining(horse: Object)`
- Calculates remaining cooldown time in milliseconds.
- Purpose: Provides precise time remaining until horse can train again.
- Parameters: `horse` (object - horse with trainingCooldown field)
- Validation: Throws error if horse object is null or undefined
- Returns: Number (milliseconds remaining) or null if ready to train
- Logic: Returns null if no cooldown or cooldown in past, otherwise returns ms difference
- Used in: UI countdown timers, training scheduling, game state display
- Tests: `backend/tests/trainingCooldown.test.js` - 6 test cases covering timing calculations

### `backend/utils/trainingCooldown.js` - `setCooldown(horseId: number|string)`
- Sets training cooldown for a horse to 7 days from current time.
- Purpose: Applies training cooldown after horse completes training session.
- Parameters: `horseId` (number or string - horse ID, validated and parsed to integer)
- Validation: Validates horseId is provided and is a positive integer
- Returns: Updated horse object with relations (breed, owner, stable, player)
- Database: Updates trainingCooldown field using Prisma horse.update()
- Error handling: Specific error for non-existent horse (P2025), generic for other DB errors
- Used in: Training completion handlers, game progression logic
- Tests: `backend/tests/trainingCooldown.test.js` - 9 test cases covering validation and DB operations

### `backend/utils/trainingCooldown.js` - `formatCooldown(milliseconds: number)`
- Formats cooldown time into human-readable string.
- Purpose: Converts milliseconds into user-friendly time display format.
- Parameters: `milliseconds` (number - time remaining in milliseconds)
- Returns: String - formatted time or "Ready to train" if <= 0 or null
- Format logic: Days/hours for >24h, hours/minutes for >1h, minutes only for <1h
- Examples: "3 day(s), 2 hour(s) remaining", "5 minute(s) remaining"
- Used in: UI display, notifications, training status messages
- Tests: `backend/tests/trainingCooldown.test.js` - 7 test cases covering all format scenarios

### Training Cooldown Database Schema
- Added `trainingCooldown` field to Horse model as optional DateTime
- Migration: `20250525022323_add_training_cooldown` applied successfully
- Field allows null values (horses can train immediately when no cooldown set)
- Indexed for efficient queries on cooldown status
- Compatible with existing horse data (all existing horses have null cooldown)

### Training Cooldown Integration Testing
- Comprehensive integration tests validate end-to-end workflow
- Tests cover: initial state â†’ set cooldown â†’ verify restrictions â†’ time calculations
- Database integration confirmed with real horse records
- All 29 test cases passing with 100% coverage
- Integration with horseModel functions verified (getHorseById works with cooldown data)

# Horse Show Eligibility Utility Functions

### `backend/utils/isHorseEligible.js` - `isHorseEligibleForShow(horse: Object, show: Object, previousEntries: Array)`
- Determines if a horse is eligible to enter a specific show based on age, level, and previous entries.
- Purpose: Validates horse eligibility for show participation with comprehensive rule checking.
- Parameters: 
  - `horse` (object - horse with age and level properties, required)
  - `show` (object - show with id, levelMin, and levelMax properties, required)
  - `previousEntries` (array - show IDs the horse has previously entered, default: [])
- Validation: Comprehensive input validation with specific error messages for invalid inputs
- Eligibility Rules:
  - Age must be between 3 and 20 (inclusive)
  - Horse level must be within show's levelMin and levelMax range (if specified)
  - Horse cannot have already entered this specific show (checked via show.id in previousEntries)
  - Discipline does NOT restrict eligibility (horses can enter any discipline regardless of trait)
  - Health status does NOT restrict eligibility (affects scoring only)
- Returns: Boolean - true if eligible, false otherwise
- Error handling: Throws descriptive errors for null/undefined inputs or invalid parameter types
- Used in: Show registration system, UI eligibility checks, competition management
- Tests: `backend/tests/isHorseEligible.test.js` - 43 comprehensive test cases covering all scenarios

### Horse Show Eligibility Business Rules
- **Age Requirements:** Horses must be between 3-20 years old (inclusive) to participate in shows
- **Level Requirements:** Shows can specify minimum and maximum level requirements (optional)
- **Duplicate Prevention:** Horses cannot enter the same show multiple times
- **Discipline Independence:** Any horse can enter any discipline regardless of their trait or specialization
- **Health Independence:** Health status affects performance/scoring but not eligibility
- **Flexible Level Limits:** Shows can have no level restrictions, only minimum, only maximum, or both
- **Mixed ID Support:** Supports both string and numeric show IDs in previousEntries tracking

# Horse Show Eligibility Utility Functions

### `backend/utils/isHorseEligible.js` - `isHorseEligibleForShow(horse: Object, show: Object, previousEntries: Array)`
- Checks if a horse is eligible for a specific show based on multiple criteria.
- Purpose: Validates horse eligibility before allowing entry into competitions.
- Parameters: 
  - `horse` (object - horse with level, discipline, and other properties)
  - `show` (object - show with eligibility criteria like levelMin, levelMax, allowedDisciplines)
  - `previousEntries` (array - show IDs the horse has already entered, defaults to empty array)
- Validation: Throws error if horse or show objects are null/undefined
- Returns: Boolean - true if eligible, false if disqualified for any reason
- Eligibility checks:
  - Level range validation (horse.level within show.levelMin and show.levelMax)
  - Discipline validation (horse.discipline in show.allowedDisciplines)
  - Duplicate entry prevention (show.id not in previousEntries)
- Used in: Competition entry systems, show filtering, eligibility validation
- Tests: `backend/tests/isHorseEligible.test.js` - 25 test cases covering all scenarios

### `backend/utils/isHorseEligible.js` - `getEligibilityDetails(horse: Object, show: Object, previousEntries: Array)`
- Provides detailed eligibility information with specific reasons for disqualification.
- Purpose: Offers comprehensive feedback for UI display and debugging purposes.
- Parameters: Same as `isHorseEligibleForShow`
- Returns: Object with `eligible` (boolean) and `reasons` (array of strings)
- Features:
  - Detailed error messages for each disqualification reason
  - Multiple reason accumulation for comprehensive feedback
  - User-friendly error descriptions with specific values
- Error examples: "Horse level (0) is below minimum required (1)", "Horse discipline (racing) is not allowed. Allowed: jumping, dressage"
- Used in: UI feedback systems, admin panels, debugging tools
- Tests: `backend/tests/isHorseEligible.test.js` - 13 test cases covering detailed reporting scenarios

### Horse Show Eligibility Logic Rules
- **Level Validation:** Horse level must be a number within show's levelMin and levelMax range (inclusive)
- **Discipline Validation:** Horse discipline must be included in show's allowedDisciplines array
- **Duplicate Prevention:** Horse cannot enter the same show multiple times (checked via show ID)
- **Boundary Handling:** Level boundaries are inclusive (level = levelMin or levelMax is valid)
- **Optional Restrictions:** Shows can omit levelMin, levelMax, or allowedDisciplines for no restrictions
- **Edge Cases:** Handles negative levels, very large numbers, empty arrays, and non-array disciplines

### Horse Show Eligibility Test Coverage
- Comprehensive test suite with 38 test cases covering all scenarios
- Valid scenarios: boundary conditions, optional restrictions, empty arrays
- Invalid scenarios: level violations, discipline mismatches, duplicate entries
- Parameter validation: null/undefined inputs with proper error handling
- Edge cases: negative levels, large numbers, empty disciplines, non-array types
- Detailed reporting: specific error messages and multiple reason accumulation
- Integration ready: designed for use in competition systems and UI components

# Mock Show Generation Utility Functions

### `backend/utils/generateMockShows.js` - `generateMockShows(count: number)`
- Generates realistic mock shows for testing and seeding purposes.
- Purpose: Creates test data for competition simulation system and database seeding.
- Parameters: `count` (number - number of shows to generate, defaults to 10)
- Validation: Throws error if count is not a non-negative number
- Returns: Array of show objects with all required properties
- Show properties generated:
  - `id`: Sequential integer starting from 1
  - `name`: Realistic format "{Season} {Adjective} - {Discipline}"
  - `discipline`: Randomly selected from all valid disciplines in statMap
  - `levelMin`: Random integer 1-7
  - `levelMax`: Random integer levelMin+1 to min(10, levelMin+3)
  - `entryFee`: Random integer 100-500
  - `prize`: Random integer 500-2000
  - `runDate`: Random date Â±30 days from today
- Word banks: 5 seasons, 20 adjectives for realistic name generation
- Used in: Database seeding, testing competition systems, mock data generation
- Tests: `backend/tests/generateMockShows.test.js` - 20 test cases covering all generation logic

### `backend/utils/generateMockShows.js` - `generateSingleMockShow(overrides: Object)`
- Generates a single mock show with optional property overrides.
- Purpose: Creates customized test shows for specific testing scenarios.
- Parameters: `overrides` (object - properties to override in generated show, defaults to empty)
- Returns: Single show object with default generation + specified overrides
- Features: Maintains all generation constraints for non-overridden properties
- Used in: Unit testing, specific test scenarios, custom show creation
- Tests: Covered in generateMockShows test suite with override scenarios

### Mock Show Generation Logic
- **Name Generation:** Combines random season + adjective + discipline for realistic variety
- **Level Constraints:** Ensures levelMax > levelMin and levelMax â‰¤ 10
- **Financial Ranges:** Entry fees 100-500, prizes 500-2000 for game balance
- **Date Distribution:** Â±30 days from current date for realistic scheduling
- **Discipline Integration:** Uses getAllDisciplines() from statMap for consistency
- **ID Management:** Sequential IDs starting from 1 for predictable testing

# Show Seeding Functions

### `backend/seed/seedShows.js` - `seedShows(count: number)`
- Main seeding function that populates database with mock shows.
- Purpose: Creates sample show data for development and testing environments.
- Parameters: `count` (number - number of shows to create, defaults to 10)
- Returns: Boolean - true if successful, false if there were issues
- Features:
  - Duplicate prevention via name checking
  - Comprehensive error handling and logging
  - Success/failure statistics reporting
  - Graceful handling of database errors
- Process: Generate mock shows â†’ check duplicates â†’ create in database â†’ report results
- Used in: Database initialization, development environment setup
- CLI: Available via `npm run seed:shows` and `npm run seed:shows:dev`

### `backend/seed/seedShows.js` - `createShow(showData: Object)`
- Creates a single show record in the database.
- Purpose: Handles individual show creation with proper error handling.
- Parameters: `showData` (object - show data matching Show model schema)
- Returns: Created show object or null if failed
- Database operations: Uses Prisma Show.create() with all required fields
- Error handling: Logs specific error messages, returns null on failure
- Used in: Show seeding operations, individual show creation

### `backend/seed/seedShows.js` - `checkShowExists(name: string)`
- Checks if a show with the given name already exists in the database.
- Purpose: Prevents duplicate show creation during seeding operations.
- Parameters: `name` (string - show name to check)
- Returns: Boolean - true if show exists, false otherwise
- Error handling: Returns false and logs warning on database errors
- Database operations: Uses Prisma Show.findFirst() with name filter
- Used in: Duplicate prevention during seeding

### Show Seeding Integration
- **Database Schema:** Uses Show model with unique name constraint
- **Environment Support:** Separate scripts for development and production
- **Prisma Integration:** Uses correct Prisma client path for monorepo structure
- **CLI Scripts:** `npm run seed:shows` (production), `npm run seed:shows:dev` (development)
- **Error Resilience:** Continues seeding on individual failures, provides summary statistics
- **Logging:** Comprehensive console output with emojis for easy status identification

# Competition System Functions

### Database Schema - `CompetitionResult` Model
- **Table:** `competition_results`
- **Purpose:** Stores competition results linking horses to shows with scores and placements
- **Fields:**
  - `id` (SERIAL PK) - Unique result identifier
  - `horseId` (INTEGER FK) - References horse table
  - `showId` (INTEGER FK) - References show table  
  - `score` (FLOAT) - Final competition score
  - `placement` (STRING, nullable) - "1st", "2nd", "3rd", or null for non-podium
  - `discipline` (STRING) - Competition discipline (redundant for history)
  - `runDate` (DATETIME) - When the show was run
  - `createdAt` (DATETIME) - Record creation timestamp
- **Relations:** Belongs to Horse and Show models
- **Migration:** `20250525044738_add_competition_results`

### `backend/models/resultModel.js` - `saveResult(resultData: Object)`
- Saves a competition result to the database with comprehensive validation.
- Purpose: Records individual horse performance in competitions for leaderboards and history.
- Parameters: `resultData` (object with horseId, showId, score, placement, discipline, runDate - all required except placement)
- Validation: 
  - Required fields: horseId, showId, score, discipline, runDate
  - Score must be a number
  - Horse/Show IDs must be positive integers
  - Placement can be null for non-top-3 finishers
- Returns: Created result object with horse and show relations included
- Throws: Error with descriptive message for validation failures or database errors
- Used in: Competition completion, result recording systems
- Tests: `backend/tests/resultModel.test.js` - 11 test cases covering all validation scenarios

### `backend/models/resultModel.js` - `getResultsByHorse(horseId: number)`
- Retrieves all competition results for a specific horse.
- Purpose: Provides horse competition history for profile views and performance tracking.
- Parameters: `horseId` (number - horse ID, validated as positive integer)
- Validation: Horse ID must be a positive integer
- Returns: Array of result objects with show and horse relations included
- Relations included: show, horse.breed
- Throws: Error for invalid horse ID or database errors
- Used in: Horse profile pages, performance analytics, competition history
- Tests: `backend/tests/resultModel.test.js` - 4 test cases covering success, not found, and validation scenarios

### `backend/models/resultModel.js` - `getResultsByShow(showId: number)`
- Retrieves all competition results for a specific show.
- Purpose: Provides show leaderboards and complete competition results.
- Parameters: `showId` (number - show ID, validated as positive integer)
- Validation: Show ID must be a positive integer
- Returns: Array of result objects with horse and show relations included
- Relations included: horse.breed, show
- Throws: Error for invalid show ID or database errors
- Used in: Show leaderboards, competition results pages, historical data
- Tests: `backend/tests/resultModel.test.js` - 4 test cases covering success, not found, and validation scenarios

### `backend/models/resultModel.js` - `getResultById(resultId: number)`
- Retrieves a specific competition result by ID.
- Purpose: Fetches individual result details for detailed views or verification.
- Parameters: `resultId` (number - result ID, validated as positive integer)
- Validation: Result ID must be a positive integer
- Returns: Result object with full relations if found, null if not found
- Relations included: horse.breed, show
- Throws: Error for invalid result ID or database errors
- Used in: Result detail views, administrative verification, data analysis
- Tests: `backend/tests/resultModel.test.js` - 4 test cases covering success, not found, and validation scenarios

### `backend/controllers/competitionController.js` - `enterAndRunShow(horseIds: Array, show: Object)`
- Orchestrates the complete competition process from entry to result recording.
- Purpose: Handles horse entry validation, competition simulation, and result persistence.
- Parameters: 
  - `horseIds` (array of numbers - horse IDs to enter, required)
  - `show` (object - show details with id, discipline, levelMin, levelMax, runDate, required)
- Process Flow:
  1. Validates input parameters
  2. Fetches horse data for each ID
  3. Checks eligibility using `isHorseEligibleForShow()`
  4. Filters out horses that already entered this show
  5. Runs `simulateCompetition()` on valid horses
  6. Saves results using `resultModel.saveResult()`
  7. Assigns placements ("1st", "2nd", "3rd") to top 3 finishers
- Returns: Object with success status, results array, and summary statistics
- Error Handling: Graceful handling of missing horses, simulation failures, and database errors
- Used in: Competition entry systems, show management, automated competitions
- Tests: `backend/tests/competitionController.test.js` - 10 test cases covering all scenarios

### `backend/routes/competitionRoutes.js` - Competition REST API
- **Base Path:** `/api/competition`
- **Purpose:** Provides REST endpoints for competition entry and result retrieval
- **Middleware:** Express-validator for request validation, comprehensive error handling

#### `POST /api/competition/enter-show`
- Enters horses into a show and runs the competition.
- **Request Body:** `{ showId: number, horseIds: number[] }`
- **Validation:** 
  - showId must be positive integer
  - horseIds must be non-empty array of positive integers
- **Response:** Competition results with success status and summary statistics
- **Error Handling:** 400 for validation errors, 500 for server errors
- **Used in:** Competition entry forms, automated show systems

#### `GET /api/competition/show/:showId/results`
- Retrieves all results for a specific show.
- **Parameters:** `showId` (URL parameter, validated as positive integer)
- **Response:** Array of results with horse and show details
- **Used in:** Show leaderboards, competition history pages

#### `GET /api/competition/horse/:horseId/results`
- Retrieves all competition results for a specific horse.
- **Parameters:** `horseId` (URL parameter, validated as positive integer)
- **Response:** Array of results with show and horse details
- **Used in:** Horse profile pages, performance tracking

### Competition System Integration
- **Database Schema:** CompetitionResult model with proper foreign key relationships
- **Eligibility System:** Integrates with `isHorseEligibleForShow()` for entry validation
- **Simulation Engine:** Uses `simulateCompetition()` for realistic competition scoring
- **Duplicate Prevention:** Checks existing results to prevent multiple entries in same show
- **Placement Logic:** Automatically assigns "1st", "2nd", "3rd" to top 3 finishers
- **Error Resilience:** Comprehensive error handling with detailed logging and graceful failures
- **Test Coverage:** 33 total tests (23 resultModel + 10 competitionController) with 100% coverage

# Training System (Tasks 2.1, 2.2, 2.3 & 2.4) - COMPLETED

### Database Schema - `TrainingLog` Model
- **Table:** `training_logs`
- **Purpose:** Tracks training sessions for horses in specific disciplines
- **Fields:**
  - `id` (SERIAL PK) - Unique training log identifier
  - `horseId` (INTEGER FK) - References horse table
  - `discipline` (STRING) - Discipline being trained
  - `trainedAt` (DATETIME) - When the training session occurred (defaults to NOW())
- **Relations:** Belongs to Horse model
- **Migration:** `20250525070153_add_training_logs`

### Training System Business Rules
- **Age Requirement:** Horses must be 3+ years old to train
- **Training Effect:** Training adds +5 to selected discipline score
- **Cooldown Period:** 7-day cooldown period per discipline (discipline-specific)
- **Discipline Independence:** Each discipline has its own cooldown timer

### `backend/models/trainingModel.js` - `logTrainingSession({ horseId, discipline })`
- Records a new training session for a horse in a specific discipline.
- Purpose: Logs training activity for cooldown tracking and progression history.
- Parameters: 
  - `horseId` (number - horse ID, required, must be positive integer)
  - `discipline` (string - discipline being trained, required)
- Validation: 
  - Horse ID must be provided and be a positive integer
  - Discipline must be provided and non-empty
- Returns: Created training log record with all fields
- Throws: Error with descriptive message for validation failures or database errors
- Used in: Training systems, progression tracking, cooldown management
- Tests: 5 test cases covering success, validation, and error scenarios

### `backend/models/trainingModel.js` - `getLastTrainingDate(horseId, discipline)`
- Retrieves the most recent training date for a horse in a specific discipline.
- Purpose: Enables cooldown period enforcement and training eligibility checks.
- Parameters:
  - `horseId` (number - horse ID, must be positive integer)
  - `discipline` (string - discipline to check, required)
- Validation: Horse ID must be positive integer, discipline must be provided
- Returns: Date object of most recent training or null if never trained
- Throws: Error for invalid parameters or database errors
- Used in: Cooldown validation, training eligibility checks, UI status display
- Tests: 5 test cases covering found/not found scenarios and validation

### `backend/models/trainingModel.js` - `getHorseAge(horseId)`
- Retrieves the age of a horse from the database for training eligibility.
- Purpose: Validates that horses meet the minimum age requirement (3 years) for training.
- Parameters: `horseId` (number - horse ID, must be positive integer)
- Validation: Horse ID must be a positive integer
- Returns: Number representing horse age or null if horse not found
- Throws: Error for invalid horse ID or database errors
- Used in: Training eligibility validation, age verification systems
- Tests: 4 test cases covering success, not found, and validation scenarios

### `backend/controllers/trainingController.js` - Training Business Logic
- **Purpose:** Orchestrates training eligibility checks, training execution, and status reporting
- **Core Functions:**
  - `canTrain(horseId, discipline)` - Returns eligibility status with reason
  - `trainHorse(horseId, discipline)` - Executes training with validation
  - `getTrainingStatus(horseId, discipline)` - Provides detailed status information

### `backend/controllers/trainingController.js` - `canTrain(horseId, discipline)`
- Comprehensive eligibility validation for horse training in specific disciplines.
- Purpose: Validates age requirements and cooldown periods before allowing training.
- Parameters: `horseId` (number), `discipline` (string - both required)
- Validation: Horse ID must be positive integer, discipline must be non-empty
- Returns: Object with `eligible` (boolean) and `reason` (string or null)
- Business Logic:
  - Age check: Horse must be 3+ years old
  - Cooldown check: 7-day period since last training in same discipline
  - Horse existence: Returns specific error for non-existent horses
- Used in: Training systems, UI eligibility checks, training workflow validation
- Tests: 10 test cases covering all eligibility scenarios and validation

### `backend/controllers/trainingController.js` - `trainHorse(horseId, discipline)`
- Executes horse training with full eligibility validation and session logging.
- Purpose: Complete training workflow from validation to session recording.
- Parameters: `horseId` (number), `discipline` (string - both required)
- Process: Eligibility check â†’ training session logging â†’ success response
- Returns: Object with `success` (boolean), `reason` (string), `trainingLog` (object), `message` (string)
- Features: Automatic rejection for ineligible horses with specific reasons
- Integration: Uses `canTrain()` for validation, `logTrainingSession()` for persistence
- Used in: Training execution, API endpoints, automated training systems
- Tests: 4 test cases covering success, rejection, and error scenarios

### `backend/controllers/trainingController.js` - `getTrainingStatus(horseId, discipline)`
- Provides comprehensive training status information for horses in specific disciplines.
- Purpose: Detailed status reporting for UI display and training management.
- Parameters: `horseId` (number), `discipline` (string - both required)
- Returns: Object with eligibility, age, last training date, and cooldown information
- Cooldown Details: Active status, remaining days/hours, last training timestamp
- Features: Human-readable cooldown calculations for UI integration
- Used in: Training dashboards, status displays, cooldown timers
- Tests: 5 test cases covering all status scenarios and error handling

### `backend/routes/trainingRoutes.js` - Training REST API
- **Base Path:** `/api/training`
- **Purpose:** Provides REST endpoints for training operations with comprehensive validation
- **Middleware:** Express-validator for request validation, comprehensive error handling

#### `POST /api/training/check-eligibility`
- Checks horse eligibility for training in a specific discipline.
- **Request Body:** `{ horseId: number, discipline: string }`
- **Validation:** Horse ID must be positive integer, discipline 1-50 characters
- **Response:** Eligibility status with eligible boolean and reason
- **Used in:** Training UI validation, pre-training checks

#### `POST /api/training/train`
- Executes horse training with full validation and session logging.
- **Request Body:** `{ horseId: number, discipline: string }`
- **Validation:** Horse ID must be positive integer, discipline 1-50 characters
- **Response:** Training result with success status and training log details
- **Status Codes:** 200 for success, 400 for training rejection, 500 for server errors
- **Used in:** Training execution, mobile app training features

#### `GET /api/training/status/:horseId/:discipline`
- Retrieves detailed training status for a horse in a specific discipline.
- **Parameters:** `horseId` (positive integer), `discipline` (1-50 characters)
- **Response:** Complete status including eligibility, age, cooldown information
- **Used in:** Training status displays, cooldown timers, training dashboards

#### `GET /api/training/horse/:horseId/all-status`
- Retrieves training status across all disciplines for a specific horse.
- **Parameters:** `horseId` (positive integer)
- **Response:** Array of status objects for all supported disciplines
- **Disciplines:** Racing, Show Jumping, Dressage, Cross Country, Western
- **Error Handling:** Graceful handling of individual discipline failures
- **Used in:** Horse profile pages, comprehensive training overviews

### Database Schema - `disciplineScores` Field Enhancement
- **Table:** `horses` table enhanced with `disciplineScores` JSONB field
- **Purpose:** Stores discipline-specific scores as JSON object (e.g., {"Dressage": 10, "Show Jumping": 20})
- **Migration:** `20250525070153_add_discipline_scores` applied successfully
- **Default Value:** NULL for new horses, allowing flexible initialization
- **Structure:** Key-value pairs where keys are discipline names and values are numeric scores

### `backend/models/horseModel.js` - `updateDisciplineScore(horseId, discipline, pointsToAdd)`
- Updates a horse's discipline score by adding points to existing or new discipline.
- Purpose: Handles discipline score progression from training sessions and competition rewards.
- Parameters: 
  - `horseId` (number - horse ID, validated as positive integer)
  - `discipline` (string - discipline name, required and non-empty)
  - `pointsToAdd` (number - points to add, must be positive)
- Validation: Comprehensive input validation with specific error messages
- Logic: Retrieves current scores, adds points to specified discipline, updates database
- Returns: Updated horse object with all relations (breed, owner, stable, player)
- Database: Uses Prisma horse.update() with JSONB field manipulation
- Error handling: Specific errors for non-existent horses and validation failures
- Used in: Training completion, competition rewards, skill progression systems
- Tests: 15 test cases covering all scenarios including edge cases and error handling

### `backend/models/horseModel.js` - `getDisciplineScores(horseId)`
- Retrieves current discipline scores for a specific horse.
- Purpose: Provides read-only access to horse's discipline progression data.
- Parameters: `horseId` (number - horse ID, validated as positive integer)
- Validation: Horse ID must be a positive integer
- Returns: Object containing discipline scores or empty object if no scores set
- Error handling: Specific error for non-existent horses, graceful handling of null scores
- Used in: UI display, training eligibility checks, competition entry validation
- Tests: 6 test cases covering success, not found, and validation scenarios

### `backend/models/horseModel.js` - `incrementDisciplineScore(horseId, discipline)` (Task 2.4)
- Convenience function that increments a horse's discipline score by exactly +5 points.
- Purpose: Provides a simplified interface for training operations that always add +5 points.
- Parameters: 
  - `horseId` (number - horse ID, validated as positive integer)
  - `discipline` (string - discipline to increment, required and non-empty)
- Implementation: Uses `updateDisciplineScore(horseId, discipline, 5)` internally for consistency
- Returns: Updated horse object with relations (breed, owner, stable, player)
- Validation: Inherits all validation from `updateDisciplineScore` function
- Error Handling: Re-throws errors from underlying function with proper error messages
- Used in: Training controller for consistent +5 point increments during training sessions
- Tests: 6 test cases covering new horse scores, existing scores, multiple disciplines, and validation scenarios

### `backend/controllers/trainingController.js` - Enhanced `trainHorse(horseId, discipline)` (Task 2.3)
- **Complete Training Workflow:** Executes full training process including discipline score updates
- **Enhanced Return Format:** Returns comprehensive training result with updated horse data
- **Process Flow:**
  1. Validates eligibility using `canTrain(horseId, discipline)`
  2. Updates discipline score by +5 using `updateDisciplineScore()`
  3. Logs training session using `logTrainingSession()`
  4. Calculates next eligible training date (7 days from now)
  5. Returns complete result with updated horse object
- **Return Object:**
  ```javascript
  {
    success: true,
    updatedHorse: {...}, // Complete horse object with updated disciplineScores
    message: "Horse trained successfully in Dressage. +5 added.",
    nextEligible: "2025-06-01T10:30:00.000Z", // ISO timestamp 7 days from now
    reason: null // Only present if success is false
  }
  ```
- **Error Handling:** Graceful rejection for ineligible horses with specific reasons
- **Integration:** Seamlessly integrates with existing training model and horse model functions
- **Used in:** Training execution API, mobile app training features, automated training systems
- **Tests:** Enhanced test coverage including discipline score validation and return format verification

### `backend/controllers/trainingController.js` - `getTrainableHorses(playerId)`
- Retrieves all horses owned by a player that are eligible for training in at least one discipline.
- Purpose: Provides filtered list of horses that can be trained, checking age requirements and cooldown periods across all disciplines.
- Parameters: `playerId` (string - player UUID, required and validated)
- Validation: Player ID must be provided and non-empty
- Business Logic:
  - Fetches player with horses using `getPlayerWithHorses()`
  - Filters out horses under 3 years old (age requirement)
  - Checks each discipline (Racing, Show Jumping, Dressage, Cross Country, Western) for cooldown eligibility
  - Uses `getLastTrainingDate()` to determine if 7-day cooldown has expired
  - Only includes horses with at least one trainable discipline
- Returns: Array of horse objects with `horseId`, `name`, `age`, and `trainableDisciplines` array
- Error Handling: Graceful handling of individual discipline check failures, continues processing other disciplines
- Used in: Horse training UI, training management systems, player dashboard
- Tests: 8 comprehensive test cases covering all scenarios including edge cases and error handling

### `backend/routes/horseRoutes.js` - Horse REST API Enhancement
- **Base Path:** `/api/horses`
- **Purpose:** Provides REST endpoints for horse-related operations including training eligibility

#### `GET /api/horses/trainable/:playerId`
- Retrieves all horses owned by a player that are eligible for training.
- **Parameters:** `playerId` (URL parameter, validated as 1-50 characters)
- **Validation:** Player ID length validation using express-validator
- **Response:** JSON object with success status, message, and data array
- **Response Format:**
  ```json
  {
    "success": true,
    "message": "Found X trainable horses",
    "data": [
      {
        "horseId": 7,
        "name": "Nova",
        "age": 5,
        "trainableDisciplines": ["Dressage", "Western"]
      }
    ]
  }
  ```
- **Error Handling:** 400 for validation errors, 500 for server errors
- **Used in:** Training management UI, horse selection interfaces, mobile app training features

### Training System Integration (Task 2.5 - COMPLETED)
- **Complete Training Workflow:** Full end-to-end training system from eligibility checking to execution
- **Multi-Discipline Support:** Handles all 5 disciplines (Racing, Show Jumping, Dressage, Cross Country, Western) independently
- **Age-Based Filtering:** Automatically filters horses under 3 years old from training eligibility
- **Cooldown Management:** 7-day discipline-specific cooldown periods with precise tracking
- **Player Integration:** Seamless integration with player-horse relationships via `getPlayerWithHorses()`
- **Error Resilience:** Graceful handling of database errors and individual discipline check failures
- **API Integration:** Complete REST API with proper validation, error handling, and response formatting
- **Test Coverage:** 38 total tests (30 trainingController + 8 getTrainableHorses) with comprehensive scenario coverage
- **Production Ready:** Full validation, logging, error handling, and documentation for deployment
