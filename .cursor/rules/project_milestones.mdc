---
description: Tracks Equoria's major development milestones and learnings. Updated after each major implementation or feature completion.
globs: ["**/*"]
alwaysApply: true
---
## 🏁 Project Milestones

This file is intended to capture key implementation checkpoints and architectural shifts in the Equoria project. Cursor should:

- Append a new entry at the end of this file after each major completed feature, architectural refactor, or gameplay system rollout.
- Include:
  - Date
  - Feature/Module name
  - Description of what was completed
  - Any notable learnings, blockers, or decisions made

**Example Entry:**
```
### [2025-05-21] — Rider-Horse Synergy Heatmap MVP Completed
- Implemented initial backend and frontend structure for synergy calculation and display.
- Learned that floating-point trait weighting needed normalization for UI clarity.
- Refactored heatmap color logic into a shared utility function.
```

> Keep this file up to date so that future contributors or reviews have a clear sense of project progression.

### [2024-05-22] — Initial Backend Server Setup and Core Tooling Configured
- Implemented basic Express.js server structure with `app.js` for application logic and `server.js` for server instantiation.
- Centralized environment variable management in `config/config.js` with validation.
- Established a modular routing system with an example `/ping` route, controller, and validation middleware (`express-validator`).
- Integrated a global error handler middleware.
- Set up essential development tools: ESLint for linting, Prettier for formatting, Jest for testing (unit and integration), and Nodemon for auto-restarting the dev server.
- Configured Jest to use a separate test environment (`.env.test`) and `supertest` for API endpoint testing.
- Separated database connection logic into `db/index.js`, initialized by `server.js`.
- Decision: Adopted a structured approach to backend development, prioritizing modularity, testability, and best practices from the outset.
