Task 1.6e — Competition Entry & Result Recording
This task covers:

✅ Accepting horses into a show (backend route/controller)

✅ Preventing duplicate entries

✅ Running simulateCompetition() on entries

✅ Saving results to a competition_results table

✅ Returning the placements

📁 Folder & File Structure
bash
Copy
Edit
backend/
├── controllers/
│   └── competitionController.js
├── routes/
│   └── competitionRoutes.js
├── models/
│   └── resultModel.js
├── logic/
│   └── simulateCompetition.js
├── utils/
│   └── (reuse health/statMap/rider/etc.)
├── tests/
│   └── competitionController.test.js
🧱 New Table: competition_results
Field	Type	Notes
id	SERIAL PK	
horse_id	INTEGER FK	References horse
show_id	INTEGER FK	References show
score	NUMERIC	Final competition score
placement	TEXT	"1st", "2nd", "3rd", or NULL
discipline	TEXT	From show (redundant for history)
run_date	DATE	When this show was run

🧠 Cursor Prompt — models/resultModel.js
Prompt:

“Create a PostgreSQL model resultModel.js that:

Inserts a new competition result with horse ID, show ID, score, placement, discipline, and run date

Has functions:

saveResult(resultData)

getResultsByHorse(horseId)

getResultsByShow(showId)

Uses utils/database.js for DB access”

🧠 Cursor Prompt — controllers/competitionController.js
Prompt:

“In controllers/competitionController.js, create:

enterAndRunShow(horseIds, show) that:

Fetches horse data for each horseId

Filters out horses already entered in this show

Passes valid horses to simulateCompetition(horses, show)

Saves results using resultModel.saveResult() for each horse

Returns the full placement list (top 3 + others)

Create a companion route in routes/competitionRoutes.js:

POST /enter-show

Accepts JSON: { showId, horseIds: [1, 2, 3] }

Returns placements with scores”

🧪 Cursor Prompt — tests/competitionController.test.js
Prompt:

“Create Jest tests for enterAndRunShow() that:

Pass a mock show and 5 horses

Confirm results are sorted and saved

Confirm top 3 get 1st/2nd/3rd placements

Confirm DB calls to resultModel are made for each entry”

📥 Optional Helper: Check Duplicate Entry
If you want to centralize this:

js
Copy
Edit
function hasEnteredBefore(horseId, showId, existingResults) {
  return existingResults.some(
    (r) => r.horse_id === horseId && r.show_id === showId
  );
}
✅ Final Checklist for Task 1.6e
Step	Status
competition_results table defined	☐
resultModel.js with save + query	☐
enterAndRunShow() combines entry + sim	☐
REST route /enter-show accepts entries	☐
Full test coverage for all steps	☐

Once complete, you'll have a full backend gameplay loop:

Show generation → Entry → Simulation → Scoring → Results saved